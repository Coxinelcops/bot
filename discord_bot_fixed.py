
# === Syst√®me de r√¥les par r√©action (sauvegarde + debug) ===
reaction_roles_file = "reaction_roles.json"

def load_reaction_roles():
    if os.path.exists(reaction_roles_file):
        with open(reaction_roles_file, 'r') as f:
            return json.load(f)
    return {}

def save_reaction_roles():
    with open(reaction_roles_file, 'w') as f:
        json.dump(reaction_role_messages, f, indent=2)

reaction_role_messages = load_reaction_roles()

@bot.command(name='reactionroledebug')
async def reactionrole_debug(ctx):
    """Affiche les donn√©es enregistr√©es pour les messages √† r√¥le"""
    if not reaction_role_messages:
        await ctx.send("‚ö†Ô∏è Aucun message de r√¥le par r√©action enregistr√©.")
        return

    msg = "**Messages enregistr√©s :**\n"
    for msg_id, data in reaction_role_messages.items():
        role = ctx.guild.get_role(data['role_id'])
        msg += f"‚Ä¢ ID: `{msg_id}` | R√¥le: `{role.name if role else 'Inconnu'}` | Emoji: `{data['emoji']}`\n"
    await ctx.send(msg)

@bot.event
async def on_reaction_add(reaction, user):
    if user.bot:
        return

    print(f"[DEBUG] R√©action d√©tect√©e par {user.name}")
    print(f"[DEBUG] Message ID : {reaction.message.id}")
    print(f"[DEBUG] Emoji re√ßu : {reaction.emoji}")
    print(f"[DEBUG] Base de donn√©es : {reaction_role_messages}")

    message_id = str(reaction.message.id)
    data = reaction_role_messages.get(message_id)

    if not data:
        print("[DEBUG] üî¥ Aucune donn√©e trouv√©e pour ce message")
        return

    if str(reaction.emoji) != data['emoji']:
        print("[DEBUG] ‚ùå Emoji ne correspond pas √† l‚Äôattendu")
        return

    guild = bot.get_guild(data['guild_id'])
    if not guild:
        print("[DEBUG] ‚ùå Guilde introuvable")
        return

    member = guild.get_member(user.id)
    role = guild.get_role(data['role_id'])

    if not role:
        print("[DEBUG] ‚ùå R√¥le introuvable")
    if not member:
        print("[DEBUG] ‚ùå Membre introuvable")

    if member and role:
        try:
            await member.add_roles(role)
            print(f"[DEBUG] ‚úÖ R√¥le {role.name} ajout√© √† {member.name}")
        except Exception as e:
            print(f"[ERREUR] ‚ùå Impossible d‚Äôajouter le r√¥le : {e}")
